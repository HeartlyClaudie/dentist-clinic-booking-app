name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    # Install Docker Compose (fixes command not found)
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version

    # Unit tests for each service
    - name: Test User Service
      working-directory: ./user-service
      run: |
        npm ci
        npm test

    - name: Test Booking Service
      working-directory: ./booking-service
      run: |
        npm ci
        npm test

    - name: Test Product Service
      working-directory: ./product-service
      run: |
        npm ci
        npm test

    - name: Test Notification Service
      working-directory: ./notification-service
      run: |
        npm ci
        npm test

    # E2E: Spin up services using Docker Compose
    - name: Start Docker Compose
      run: docker-compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services..."
        sleep 10
        curl --retry 10 --retry-connrefused --retry-delay 2 http://localhost:3001/users || exit 1
        curl --retry 10 --retry-connrefused --retry-delay 2 http://localhost:3002/bookings || exit 1

    - name: Install and Run E2E Tests
      working-directory: ./__tests__
      run: |
        npm ci
        npm test

    - name: Stop Docker Compose
      if: always()
      run: docker-compose down

    # OPTIONAL: Build Docker Images
    - name: Build Docker Images
      run: |
        docker build -t user-service ./user-service
        docker build -t booking-service ./booking-service
        docker build -t product-service ./product-service
        docker build -t notification-service ./notification-service
